pipeline{
    agent any

    environment{
        git_commit_id = getGitLastCommitId()
    }

    //Declarative Directive Generator -> select "tool"
    tools {
        maven 'maven'
    }

    stages{

        stage("git checkout"){
            steps{
                  git credentialsId: 'git-cred', url: 'https://github.com/shivapoudyal/java-ci-cd-ansible'
            }
        }

        stage("build maven"){
            steps{
                sh "mvn clean package"
            }
        }

        stage("build docker image and tag image"){
            steps{
                sh "docker build . -t shivapoudyal/java-cicd:${git_commit_id}"
            }
        }

        stage("docker hub push image"){
            steps{

                // Snippet Generator -> select "withCredentials" add secrete text -> enter your dockerhub pass (*make variable and id name in singleword)
                withCredentials([string(credentialsId: 'dockerHubCred', variable: 'dockerHubPassword')]) {
                    sh "docker login -u shivapoudyal -p ${dockerHubPassword}"
                }

                sh "docker push shivapoudyal/java-cicd:${git_commit_id}"
            }
        }

        stage("deploy docker image to production-server"){
            
            steps{
                //* Snippet Generator -> select "ansiblePlaybook" add remote server secret key (pem) and check "Disable the host SSH key check (will not prompt any confirm popup in backgournd)", choose "Extra parameters" and enter any variable name for dockerhub image tag id, 
                ansiblePlaybook credentialsId: 'production-server-cred', disableHostKeyChecking: true, extras: "-e git_tag=${git_commit_id}", installation: 'ansible', inventory: 'inventory.txt', playbook: 'play.yml'
            }
        }
    }
}


def getGitLastCommitId(){
    
    // Snippet Generator -> select "shell script" and advance click to "Return standard output"
    def commitId = sh returnStdout: true, script: 'git rev-parse --short HEAD'
    return commitId;
}
